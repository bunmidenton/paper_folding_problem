file created

bunmi@DESKTOP-VGEK7DT MINGW64 ~ (main)
$ cd ~/workspace/dive-into-code/text/github

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  pwd
/c/Users/bunmi/workspace/dive-into-code/text/github

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  git init
Reinitialized existing Git repository in C:/Users/bunmi/workspace/dive-into-code/text/github/.git/

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  touch github_paperfolding.txt

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$ ls
README.md      github_paperfolding.md   github_task.md
git_sample.md  github_paperfolding.txt

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$ echo


bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  echo "file created" >>  github_paperfolding.txt

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  git status
On branch main
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        README.md
        github_paperfolding.txt

nothing added to commit but untracked files present (use "git add" to track)

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  git add github_paperfolding.txt
warning: in the working copy of 'github_paperfolding.txt', LF will be replaced by CRLF the next time Git touches it

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$ git commit -m "first_commit" github_paperfolding.txt
warning: in the working copy of 'github_paperfolding.txt', LF will be replaced by CRLF the next time Git touches it
[main c79a8be] first_commit
 1 file changed, 1 insertion(+)
 create mode 100644 github_paperfolding.txt

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  git push git@github.com:bunmidenton/paper_folding_problem.git
Enter passphrase for key '/c/Users/bunmi/.ssh/id_rsa':
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (2/2), 226 bytes | 113.00 KiB/s, done.
Total 2 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:bunmidenton/paper_folding_problem.git
   de35086..c79a8be  main -> main

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$  git remote add origin git@github.com:bunmidenton/paper_folding_problem.git
error: remote origin already exists.

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main)
$ git remote -v
origin  [git@github.com:bunmidenton/for_git_study.git] (fetch)
origin  [git@github.com:bunmidenton/for_git_study.git] (push)

bunmi@DESKTOP-VGEK7DT MINGW64 ~/workspace/dive-into-code/text/github (main



Problem 1
a
THICKNESS = 0.00008

folded_thickness = THICKNESS * 2 **43

print("Thickness: {} meters".format(folded_thickness))

THICKNESS = 0.00008

folded_thickness = THICKNESS * 2 **43

print("Thickness: {} meters".format(folded_thickness))

print("Thickness: {: .2f} kilometers".format(folded_thickness / 10000))

num_of_folds = 43
THICKNESS = 0.00008
for i in range(num_of_folds):
    THICKNESS = THICKNESS * 2
    print(THICKNESS)

import time
start = time.time()
THICKNESS = 0.00008

folded_thickness = THICKNESS * 2 **43

print("Thickness: {} meters".format(folded_thickness))
elapsed_time = time.time() - start
print("time : {}[s]".format(elapsed_time))

import time
start = time.time()
num_of_folds = 43
THICKNESS = 0.00008
for i in range(num_of_folds):
    THICKNESS = THICKNESS * 2
    print(THICKNESS)
    elapsed_time = time.time() - start
print("time : {}[s]".format(elapsed_time))

folded_list = [0.00008,]
thickness = 0.00008
for i in range(43):
    thickness = thickness * 2
    folded_list.append(thickness)
    print(folded_list)
    

import matplotlib.pyplot as plt
%matplotlib inline
plt.title("thickness of folded paper")
plt.xlabel("number of folds")
plt.ylabel("thickness [m]")
plt.plot(folded_list)
plt.show()

print(len(folded_list))

plt.title("thickness of folded paper")
plt.xlabel("number of folds")
plt.ylabel("thickness [m]")
plt.plot(folded_list, color='red')
plt.show()

plt.title("thickness of folded paper")
plt.xlabel("number of folds")
plt.ylabel("thickness [m]")
plt.plot(folded_list, color='green')
plt.show()

plt.title("thickness of folded paper")
plt.xlabel("number of folds")
plt.ylabel("thickness [m]")
plt.plot(folded_list, color='red', linestyle='dashed', marker='o')
plt.show()
